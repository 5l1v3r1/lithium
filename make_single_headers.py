#! /usr/bin/python3

import tempfile
import subprocess
import os,re,sys,shutil, os.path

from os.path import join

def process_file(library_name, f, processed, output):

    if f in processed:
        return
    processed.append(f)

    if not os.path.isfile(f):
        raise Exception(f"file not found {f}")

    for line in open(f, "r"):
        line = line.replace("li::", f"{library_name}::")
        line = line.replace("namespace li", f"namespace {library_name}")
        line = line.replace("// Generated by the lithium symbol generator.", "")

        m = re.match("^#include\s*<(li/.*)>.*$", line)
        if m:
            process_file(library_name, join(install_dir, "include", m.group(1)), processed, output)
        elif re.match("#pragma once", line):
            pass
        else:
            output += [line];

def install_lithium():
    # create temp directory.
    tmp_dir=tempfile.mkdtemp()
    src_dir=join(tmp_dir, "src")
    build_dir=join(tmp_dir, "build")
    install_dir=join(tmp_dir, "install")

    os.mkdir(src_dir)
    os.mkdir(build_dir)
    os.mkdir(install_dir)

    processed=[]

    # git clone recursive iod
    subprocess.check_call(["git", "clone", "https://github.com/matt-42/lithium", src_dir])

    # cd build_dir
    os.chdir(build_dir)

    # Install
    subprocess.call(["cmake", src_dir, "-DCMAKE_INSTALL_PREFIX=" + install_dir])
    subprocess.check_call(["make", "install", "-j4"])
    return tmp_dir

def make_single_header(install_dir, library_name, input_files, output_path):

    processed=[]

    # Generate single file header.
    lines=[]
    for f in input_files:
        process_file(library_name, join(install_dir, f"include/{f}"), processed, lines)

    body=[]
    includes=[]
    windows_includes_ref=["ciso646", "io.h"]
    windows_includes=[]
    for line in lines:
        m = re.match("^\s*#include <(.*)>$", line)
        if m:
            if m.groups()[0] in windows_includes_ref:
                windows_includes.append(line)
            else:
                includes.append(line)
        else:
            body.append(line)


    with open(output_path, 'w') as output:
        output.write("// Author: Matthieu Garrigues matthieu.garrigues@gmail.com\n//\n")
        output.write(f"// Single header version the {library_name} library.\n")
        output.write("// https://github.com/matt-42/lithium\n")
        output.write("//\n")    
        output.write("// This file is generated do not edit it.\n\n")
        output.write("#pragma once\n\n")
        for l in set(includes):
            output.write(l)
        if len(windows_includes):
            output.write("\n#if defined(_MSC_VER)\n")
            for l in set(windows_includes):
                output.write(l)        
            output.write("#endif // _MSC_VER\n")
        output.write("\n\n")
        for l in body:
            output.write(l)

if __name__ == "__main__":

    if len(sys.argv) == 3:
        install_dir = sys.argv[1]
        output_dir = sys.argv[2]
    else:
        lithium_dir = install_lithium()
        install_dir = lithium_dir.name + "/install"
        output_dir = sys.argv[1]


    data = dict({ 
        "li_metamap": ["li/metamap/metamap.hh"],
        "li_json": ["li/json/json.hh"],
        "li_http_client": ["li/http_client/http_client.hh"],
        "li_http_backend": ["li/http_backend/http_backend.hh"],
        "li_mysql": ["li/sql/mysql.hh","li/sql/sql_orm.hh"],
        "li_sqlite": ["li/sql/sqlite.hh","li/sql/sql_orm.hh"],
             })
    for libname, files in data.items():
        make_single_header(install_dir, libname, files, f"{output_dir}/{libname}.hh")
